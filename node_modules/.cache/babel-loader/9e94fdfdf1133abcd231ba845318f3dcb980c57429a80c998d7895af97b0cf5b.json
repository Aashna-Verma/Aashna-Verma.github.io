{"ast":null,"code":"import { __extends } from \"tslib\";\nimport './polyfills';\nimport { scrollbarMap, Scrollbar } from './scrollbar';\nimport { addPlugins, ScrollbarPlugin } from './plugin';\nimport { attachStyle, detachStyle } from './style';\nexport { ScrollbarPlugin };\n/**\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\nvar SmoothScrollbar = /** @class */function (_super) {\n  __extends(SmoothScrollbar, _super);\n  function SmoothScrollbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes a scrollbar on the given element.\n   *\n   * @param elem The DOM element that you want to initialize scrollbar to\n   * @param [options] Initial options\n   */\n  SmoothScrollbar.init = function (elem, options) {\n    if (!elem || elem.nodeType !== 1) {\n      throw new TypeError(\"expect element to be DOM Element, but got \" + elem);\n    }\n    // attach stylesheet\n    attachStyle();\n    if (scrollbarMap.has(elem)) {\n      return scrollbarMap.get(elem);\n    }\n    return new Scrollbar(elem, options);\n  };\n  /**\n   * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n   *\n   * @param options Initial options\n   */\n  SmoothScrollbar.initAll = function (options) {\n    return Array.from(document.querySelectorAll('[data-scrollbar]'), function (elem) {\n      return SmoothScrollbar.init(elem, options);\n    });\n  };\n  /**\n   * Check if there is a scrollbar on given element\n   *\n   * @param elem The DOM element that you want to check\n   */\n  SmoothScrollbar.has = function (elem) {\n    return scrollbarMap.has(elem);\n  };\n  /**\n   * Gets scrollbar on the given element.\n   * If no scrollbar instance exsits, returns `undefined`\n   *\n   * @param elem The DOM element that you want to check.\n   */\n  SmoothScrollbar.get = function (elem) {\n    return scrollbarMap.get(elem);\n  };\n  /**\n   * Returns an array that contains all scrollbar instances\n   */\n  SmoothScrollbar.getAll = function () {\n    return Array.from(scrollbarMap.values());\n  };\n  /**\n   * Removes scrollbar on the given element\n   */\n  SmoothScrollbar.destroy = function (elem) {\n    var scrollbar = scrollbarMap.get(elem);\n    if (scrollbar) {\n      scrollbar.destroy();\n    }\n  };\n  /**\n   * Removes all scrollbar instances from current document\n   */\n  SmoothScrollbar.destroyAll = function () {\n    scrollbarMap.forEach(function (scrollbar) {\n      scrollbar.destroy();\n    });\n  };\n  /**\n   * Attaches plugins to scrollbars\n   *\n   * @param ...Plugins Scrollbar plugin classes\n   */\n  SmoothScrollbar.use = function () {\n    var Plugins = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      Plugins[_i] = arguments[_i];\n    }\n    return addPlugins.apply(void 0, Plugins);\n  };\n  /**\n   * Attaches default style sheets to current document.\n   * You don't need to call this method manually unless\n   * you removed the default styles via `Scrollbar.detachStyle()`\n   */\n  SmoothScrollbar.attachStyle = function () {\n    return attachStyle();\n  };\n  /**\n   * Removes default styles from current document.\n   * Use this method when you want to use your own css for scrollbars.\n   */\n  SmoothScrollbar.detachStyle = function () {\n    return detachStyle();\n  };\n  SmoothScrollbar.version = \"8.8.4\";\n  SmoothScrollbar.ScrollbarPlugin = ScrollbarPlugin;\n  return SmoothScrollbar;\n}(Scrollbar);\nexport default SmoothScrollbar;","map":{"version":3,"names":["scrollbarMap","Scrollbar","addPlugins","ScrollbarPlugin","attachStyle","detachStyle","SmoothScrollbar","_super","__extends","init","elem","options","nodeType","TypeError","has","get","initAll","Array","from","document","querySelectorAll","getAll","values","destroy","scrollbar","destroyAll","forEach","use","Plugins","_i","arguments","length","apply","version"],"sources":["C:\\Users\\aashn\\OneDrive\\Documents\\Aashna\\3_PROJECTS\\programming\\personal-website\\node_modules\\smooth-scrollbar\\src\\index.ts"],"sourcesContent":["import './polyfills';\nimport * as I from './interfaces/';\n\nimport {\n  scrollbarMap,\n  Scrollbar,\n} from './scrollbar';\n\nimport {\n  addPlugins,\n  ScrollbarPlugin,\n} from './plugin';\n\nimport {\n  attachStyle,\n  detachStyle,\n} from './style';\n\nexport { ScrollbarPlugin };\n\ndeclare var __SCROLLBAR_VERSION__: string;\n\n/**\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\n\nexport default class SmoothScrollbar extends Scrollbar {\n  static version = __SCROLLBAR_VERSION__;\n\n  static ScrollbarPlugin = ScrollbarPlugin;\n\n  /**\n   * Initializes a scrollbar on the given element.\n   *\n   * @param elem The DOM element that you want to initialize scrollbar to\n   * @param [options] Initial options\n   */\n  static init(elem: HTMLElement, options?: Partial<I.ScrollbarOptions>): Scrollbar {\n    if (!elem || elem.nodeType !== 1) {\n      throw new TypeError(`expect element to be DOM Element, but got ${elem}`);\n    }\n\n    // attach stylesheet\n    attachStyle();\n\n    if (scrollbarMap.has(elem)) {\n      return scrollbarMap.get(elem) as Scrollbar;\n    }\n\n    return new Scrollbar(elem, options);\n  }\n\n  /**\n   * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n   *\n   * @param options Initial options\n   */\n  static initAll(options?: Partial<I.ScrollbarOptions>): Scrollbar[] {\n    return Array.from(document.querySelectorAll('[data-scrollbar]'), (elem: HTMLElement) => {\n      return SmoothScrollbar.init(elem, options);\n    });\n  }\n\n  /**\n   * Check if there is a scrollbar on given element\n   *\n   * @param elem The DOM element that you want to check\n   */\n  static has(elem: HTMLElement): boolean {\n    return scrollbarMap.has(elem);\n  }\n\n  /**\n   * Gets scrollbar on the given element.\n   * If no scrollbar instance exsits, returns `undefined`\n   *\n   * @param elem The DOM element that you want to check.\n   */\n  static get(elem: HTMLElement): Scrollbar | undefined {\n    return scrollbarMap.get(elem) as (Scrollbar | undefined);\n  }\n\n  /**\n   * Returns an array that contains all scrollbar instances\n   */\n  static getAll(): Scrollbar[] {\n    return Array.from(scrollbarMap.values()) as Scrollbar[];\n  }\n\n  /**\n   * Removes scrollbar on the given element\n   */\n  static destroy(elem: HTMLElement) {\n    const scrollbar = scrollbarMap.get(elem);\n\n    if (scrollbar) {\n      scrollbar.destroy();\n    }\n  }\n\n  /**\n   * Removes all scrollbar instances from current document\n   */\n  static destroyAll() {\n    scrollbarMap.forEach((scrollbar) => {\n      scrollbar.destroy();\n    });\n  }\n\n  /**\n   * Attaches plugins to scrollbars\n   *\n   * @param ...Plugins Scrollbar plugin classes\n   */\n  static use(...Plugins: (typeof ScrollbarPlugin)[]) {\n    return addPlugins(...Plugins);\n  }\n\n  /**\n   * Attaches default style sheets to current document.\n   * You don't need to call this method manually unless\n   * you removed the default styles via `Scrollbar.detachStyle()`\n   */\n  static attachStyle() {\n    return attachStyle();\n  }\n\n  /**\n   * Removes default styles from current document.\n   * Use this method when you want to use your own css for scrollbars.\n   */\n  static detachStyle() {\n    return detachStyle();\n  }\n}\n"],"mappings":";AAAA,OAAO,aAAa;AAGpB,SACEA,YAAY,EACZC,SAAS,QACJ,aAAa;AAEpB,SACEC,UAAU,EACVC,eAAe,QACV,UAAU;AAEjB,SACEC,WAAW,EACXC,WAAW,QACN,SAAS;AAEhB,SAASF,eAAe;AAIxB;;;;;;;;AASA,IAAAG,eAAA,0BAAAC,MAAA;EAA6CC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAA7C,SAAAD,gBAAA;;EA4GA;EAvGE;;;;;;EAMOA,eAAA,CAAAG,IAAI,GAAX,UAAYC,IAAiB,EAAEC,OAAqC;IAClE,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,QAAQ,KAAK,CAAC,EAAE;MAChC,MAAM,IAAIC,SAAS,CAAC,+CAA6CH,IAAM,CAAC;;IAG1E;IACAN,WAAW,EAAE;IAEb,IAAIJ,YAAY,CAACc,GAAG,CAACJ,IAAI,CAAC,EAAE;MAC1B,OAAOV,YAAY,CAACe,GAAG,CAACL,IAAI,CAAc;;IAG5C,OAAO,IAAIT,SAAS,CAACS,IAAI,EAAEC,OAAO,CAAC;EACrC,CAAC;EAED;;;;;EAKOL,eAAA,CAAAU,OAAO,GAAd,UAAeL,OAAqC;IAClD,OAAOM,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,CAAC,EAAE,UAACV,IAAiB;MACjF,OAAOJ,eAAe,CAACG,IAAI,CAACC,IAAI,EAAEC,OAAO,CAAC;IAC5C,CAAC,CAAC;EACJ,CAAC;EAED;;;;;EAKOL,eAAA,CAAAQ,GAAG,GAAV,UAAWJ,IAAiB;IAC1B,OAAOV,YAAY,CAACc,GAAG,CAACJ,IAAI,CAAC;EAC/B,CAAC;EAED;;;;;;EAMOJ,eAAA,CAAAS,GAAG,GAAV,UAAWL,IAAiB;IAC1B,OAAOV,YAAY,CAACe,GAAG,CAACL,IAAI,CAA4B;EAC1D,CAAC;EAED;;;EAGOJ,eAAA,CAAAe,MAAM,GAAb;IACE,OAAOJ,KAAK,CAACC,IAAI,CAAClB,YAAY,CAACsB,MAAM,EAAE,CAAgB;EACzD,CAAC;EAED;;;EAGOhB,eAAA,CAAAiB,OAAO,GAAd,UAAeb,IAAiB;IAC9B,IAAMc,SAAS,GAAGxB,YAAY,CAACe,GAAG,CAACL,IAAI,CAAC;IAExC,IAAIc,SAAS,EAAE;MACbA,SAAS,CAACD,OAAO,EAAE;;EAEvB,CAAC;EAED;;;EAGOjB,eAAA,CAAAmB,UAAU,GAAjB;IACEzB,YAAY,CAAC0B,OAAO,CAAC,UAACF,SAAS;MAC7BA,SAAS,CAACD,OAAO,EAAE;IACrB,CAAC,CAAC;EACJ,CAAC;EAED;;;;;EAKOjB,eAAA,CAAAqB,GAAG,GAAV;IAAW,IAAAC,OAAA;SAAA,IAAAC,EAAA,IAAsC,EAAtCA,EAAA,GAAAC,SAAA,CAAAC,MAAsC,EAAtCF,EAAA,EAAsC;MAAtCD,OAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACT,OAAO3B,UAAU,CAAA8B,KAAA,SAAIJ,OAAO;EAC9B,CAAC;EAED;;;;;EAKOtB,eAAA,CAAAF,WAAW,GAAlB;IACE,OAAOA,WAAW,EAAE;EACtB,CAAC;EAED;;;;EAIOE,eAAA,CAAAD,WAAW,GAAlB;IACE,OAAOA,WAAW,EAAE;EACtB,CAAC;EA1GMC,eAAA,CAAA2B,OAAO,GAAG;EAEV3B,eAAA,CAAAH,eAAe,GAAGA,eAAe;EAyG1C,OAAAG,eAAC;CAAA,CA5G4CL,SAAS;eAAjCK,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}
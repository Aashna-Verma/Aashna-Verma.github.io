{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { range, boolean } from './decorators/';\nvar Options = /** @class */function () {\n  function Options(config) {\n    var _this = this;\n    if (config === void 0) {\n      config = {};\n    }\n    /**\n     * Momentum reduction damping factor, a float value between `(0, 1)`.\n     * The lower the value is, the more smooth the scrolling will be\n     * (also the more paint frames).\n     */\n    this.damping = 0.1;\n    /**\n     * Minimal size for scrollbar thumbs.\n     */\n    this.thumbMinSize = 20;\n    /**\n     * Render every frame in integer pixel values\n     * set to `true` to improve scrolling performance.\n     */\n    this.renderByPixels = true;\n    /**\n     * Keep scrollbar tracks visible\n     */\n    this.alwaysShowTracks = false;\n    /**\n     * Set to `true` to allow outer scrollbars continue scrolling\n     * when current scrollbar reaches edge.\n     */\n    this.continuousScrolling = true;\n    /**\n     * Delegate wheel events and touch events to the given element.\n     * By default, the container element is used.\n     * This option will be useful for dealing with fixed elements.\n     */\n    this.delegateTo = null;\n    /**\n     * Options for plugins. Syntax:\n     *   plugins[pluginName] = pluginOptions: any\n     */\n    this.plugins = {};\n    Object.keys(config).forEach(function (prop) {\n      _this[prop] = config[prop];\n    });\n  }\n  Object.defineProperty(Options.prototype, \"wheelEventTarget\", {\n    get: function () {\n      return this.delegateTo;\n    },\n    set: function (el) {\n      console.warn('[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead.');\n      this.delegateTo = el;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  __decorate([range(0, 1)], Options.prototype, \"damping\", void 0);\n  __decorate([range(0, Infinity)], Options.prototype, \"thumbMinSize\", void 0);\n  __decorate([boolean], Options.prototype, \"renderByPixels\", void 0);\n  __decorate([boolean], Options.prototype, \"alwaysShowTracks\", void 0);\n  __decorate([boolean], Options.prototype, \"continuousScrolling\", void 0);\n  return Options;\n}();\nexport { Options };","map":{"version":3,"names":["range","boolean","Options","config","_this","damping","thumbMinSize","renderByPixels","alwaysShowTracks","continuousScrolling","delegateTo","plugins","Object","keys","forEach","prop","defineProperty","prototype","get","set","el","console","warn","__decorate","Infinity"],"sources":["C:\\Users\\aashn\\OneDrive\\Documents\\Aashna\\3_PROJECTS\\programming\\personal-website\\node_modules\\smooth-scrollbar\\src\\options.ts"],"sourcesContent":["import {\n  range,\n  boolean,\n} from './decorators/';\n\nimport {\n  ScrollbarOptions,\n} from './interfaces/';\n\nexport class Options {\n  /**\n   * Momentum reduction damping factor, a float value between `(0, 1)`.\n   * The lower the value is, the more smooth the scrolling will be\n   * (also the more paint frames).\n   */\n  @range(0, 1)\n  damping = 0.1;\n\n  /**\n   * Minimal size for scrollbar thumbs.\n   */\n  @range(0, Infinity)\n  thumbMinSize = 20;\n\n  /**\n   * Render every frame in integer pixel values\n   * set to `true` to improve scrolling performance.\n   */\n  @boolean\n  renderByPixels = true;\n\n  /**\n   * Keep scrollbar tracks visible\n   */\n  @boolean\n  alwaysShowTracks = false;\n\n  /**\n   * Set to `true` to allow outer scrollbars continue scrolling\n   * when current scrollbar reaches edge.\n   */\n  @boolean\n  continuousScrolling = true;\n\n  /**\n   * Delegate wheel events and touch events to the given element.\n   * By default, the container element is used.\n   * This option will be useful for dealing with fixed elements.\n   */\n  delegateTo: EventTarget | null = null;\n\n  get wheelEventTarget() {\n    return this.delegateTo;\n  }\n\n  set wheelEventTarget(el: EventTarget | null) {\n    console.warn('[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead.');\n\n    this.delegateTo = el;\n  }\n\n  /**\n   * Options for plugins. Syntax:\n   *   plugins[pluginName] = pluginOptions: any\n   */\n  readonly plugins: any = {};\n\n  constructor(config: Partial<ScrollbarOptions> = {}) {\n    Object.keys(config).forEach((prop) => {\n      this[prop] = config[prop];\n    });\n  }\n}\n"],"mappings":";AAAA,SACEA,KAAK,EACLC,OAAO,QACF,eAAe;AAMtB,IAAAC,OAAA;EA0DE,SAAAA,QAAYC,MAAsC;IAAlD,IAAAC,KAAA;IAAY,IAAAD,MAAA;MAAAA,MAAA,KAAsC;IAAA;IAzDlD;;;;;IAMA,KAAAE,OAAO,GAAG,GAAG;IAEb;;;IAIA,KAAAC,YAAY,GAAG,EAAE;IAEjB;;;;IAKA,KAAAC,cAAc,GAAG,IAAI;IAErB;;;IAIA,KAAAC,gBAAgB,GAAG,KAAK;IAExB;;;;IAKA,KAAAC,mBAAmB,GAAG,IAAI;IAE1B;;;;;IAKA,KAAAC,UAAU,GAAuB,IAAI;IAYrC;;;;IAIS,KAAAC,OAAO,GAAQ,EAAE;IAGxBC,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC,CAACW,OAAO,CAAC,UAACC,IAAI;MAC/BX,KAAI,CAACW,IAAI,CAAC,GAAGZ,MAAM,CAACY,IAAI,CAAC;IAC3B,CAAC,CAAC;EACJ;EApBAH,MAAA,CAAAI,cAAA,CAAId,OAAA,CAAAe,SAAA,oBAAgB;SAApB,SAAAC,CAAA;MACE,OAAO,IAAI,CAACR,UAAU;IACxB,CAAC;SAED,SAAAS,CAAqBC,EAAsB;MACzCC,OAAO,CAACC,IAAI,CAAC,mIAAmI,CAAC;MAEjJ,IAAI,CAACZ,UAAU,GAAGU,EAAE;IACtB,CAAC;;;;EA3CDG,UAAA,EADCvB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,C,uCACE;EAMduB,UAAA,EADCvB,KAAK,CAAC,CAAC,EAAEwB,QAAQ,CAAC,C,4CACD;EAOlBD,UAAA,EADCtB,OAAO,C,8CACc;EAMtBsB,UAAA,EADCtB,OAAO,C,gDACiB;EAOzBsB,UAAA,EADCtB,OAAO,C,mDACmB;EA8B7B,OAAAC,OAAC;CAAA,CA/DD;SAAaA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __assign } from \"tslib\";\nvar ScrollbarPlugin = /** @class */function () {\n  function ScrollbarPlugin(scrollbar, options) {\n    var _newTarget = this.constructor;\n    this.scrollbar = scrollbar;\n    this.name = _newTarget.pluginName;\n    this.options = __assign(__assign({}, _newTarget.defaultOptions), options);\n  }\n  ScrollbarPlugin.prototype.onInit = function () {};\n  ScrollbarPlugin.prototype.onDestroy = function () {};\n  ScrollbarPlugin.prototype.onUpdate = function () {};\n  ScrollbarPlugin.prototype.onRender = function (_remainMomentum) {};\n  ScrollbarPlugin.prototype.transformDelta = function (delta, _evt) {\n    return __assign({}, delta);\n  };\n  ScrollbarPlugin.pluginName = '';\n  ScrollbarPlugin.defaultOptions = {};\n  return ScrollbarPlugin;\n}();\nexport { ScrollbarPlugin };\nexport var globalPlugins = {\n  order: new Set(),\n  constructors: {}\n};\nexport function addPlugins() {\n  var Plugins = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    Plugins[_i] = arguments[_i];\n  }\n  Plugins.forEach(function (P) {\n    var pluginName = P.pluginName;\n    if (!pluginName) {\n      throw new TypeError(\"plugin name is required\");\n    }\n    globalPlugins.order.add(pluginName);\n    globalPlugins.constructors[pluginName] = P;\n  });\n}\nexport function initPlugins(scrollbar, options) {\n  return Array.from(globalPlugins.order).filter(function (pluginName) {\n    return options[pluginName] !== false;\n  }).map(function (pluginName) {\n    var Plugin = globalPlugins.constructors[pluginName];\n    var instance = new Plugin(scrollbar, options[pluginName]);\n    // bind plugin options to `scrollbar.options`\n    options[pluginName] = instance.options;\n    return instance;\n  });\n}","map":{"version":3,"names":["ScrollbarPlugin","scrollbar","options","name","_newTarget","pluginName","__assign","defaultOptions","prototype","onInit","onDestroy","onUpdate","onRender","_remainMomentum","transformDelta","delta","_evt","globalPlugins","order","Set","constructors","addPlugins","Plugins","_i","arguments","length","forEach","P","TypeError","add","initPlugins","Array","from","filter","map","Plugin","instance"],"sources":["C:\\Users\\aashn\\OneDrive\\Documents\\Aashna\\3_PROJECTS\\programming\\personal-website\\node_modules\\smooth-scrollbar\\src\\plugin.ts"],"sourcesContent":["import * as I from './interfaces/';\n\nimport { Scrollbar } from './scrollbar'; // used as type annotations\n\nexport class ScrollbarPlugin implements I.ScrollbarPlugin {\n  static pluginName = '';\n  static defaultOptions: any = {};\n\n  readonly scrollbar: Scrollbar;\n  readonly options: any;\n  readonly name: string;\n\n  constructor(\n    scrollbar: Scrollbar,\n    options?: any,\n  ) {\n    this.scrollbar = scrollbar;\n    this.name = new.target.pluginName;\n\n    this.options = {\n      ...new.target.defaultOptions,\n      ...options,\n    };\n  }\n\n  onInit() {}\n  onDestroy() {}\n\n  onUpdate() {}\n  onRender(_remainMomentum: I.Data2d) {}\n\n  transformDelta(delta: I.Data2d, _evt: Event): I.Data2d {\n    return { ...delta };\n  }\n}\n\nexport type PluginMap = {\n  order: Set<string>,\n  constructors: {\n    [name: string]: typeof ScrollbarPlugin,\n  },\n};\n\nexport const globalPlugins: PluginMap = {\n  order: new Set<string>(),\n  constructors: {},\n};\n\nexport function addPlugins(\n  ...Plugins: (typeof ScrollbarPlugin)[]\n): void {\n  Plugins.forEach((P) => {\n    const { pluginName } = P;\n\n    if (!pluginName) {\n      throw new TypeError(`plugin name is required`);\n    }\n\n    globalPlugins.order.add(pluginName);\n    globalPlugins.constructors[pluginName] = P;\n  });\n}\n\nexport function initPlugins(\n  scrollbar: Scrollbar,\n  options: any,\n): ScrollbarPlugin[] {\n  return Array.from(globalPlugins.order)\n    .filter((pluginName: string) => {\n      return options[pluginName] !== false;\n    })\n    .map((pluginName: string) => {\n      const Plugin = globalPlugins.constructors[pluginName];\n\n      const instance = new Plugin(scrollbar, options[pluginName]);\n\n      // bind plugin options to `scrollbar.options`\n      options[pluginName] = instance.options;\n\n      return instance;\n    });\n}\n"],"mappings":";AAIA,IAAAA,eAAA;EAQE,SAAAA,gBACEC,SAAoB,EACpBC,OAAa;;IAEb,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,IAAI,GAAGC,UAAA,CAAWC,UAAU;IAEjC,IAAI,CAACH,OAAO,GAAAI,QAAA,CAAAA,QAAA,KACPF,UAAA,CAAWG,cAAc,GACzBL,OAAO,CACX;EACH;EAEAF,eAAA,CAAAQ,SAAA,CAAAC,MAAM,GAAN,aAAU,CAAC;EACXT,eAAA,CAAAQ,SAAA,CAAAE,SAAS,GAAT,aAAa,CAAC;EAEdV,eAAA,CAAAQ,SAAA,CAAAG,QAAQ,GAAR,aAAY,CAAC;EACbX,eAAA,CAAAQ,SAAA,CAAAI,QAAQ,GAAR,UAASC,eAAyB,GAAG,CAAC;EAEtCb,eAAA,CAAAQ,SAAA,CAAAM,cAAc,GAAd,UAAeC,KAAe,EAAEC,IAAW;IACzC,OAAAV,QAAA,KAAYS,KAAK;EACnB,CAAC;EA5BMf,eAAA,CAAAK,UAAU,GAAG,EAAE;EACfL,eAAA,CAAAO,cAAc,GAAQ,EAAE;EA4BjC,OAAAP,eAAC;CAAA,CA9BD;SAAaA,eAAe;AAuC5B,OAAO,IAAMiB,aAAa,GAAc;EACtCC,KAAK,EAAE,IAAIC,GAAG,EAAU;EACxBC,YAAY,EAAE;CACf;AAED,OAAM,SAAUC,UAAUA,CAAA;EACxB,IAAAC,OAAA;OAAA,IAAAC,EAAA,IAAsC,EAAtCA,EAAA,GAAAC,SAAA,CAAAC,MAAsC,EAAtCF,EAAA,EAAsC;IAAtCD,OAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAEAD,OAAO,CAACI,OAAO,CAAC,UAACC,CAAC;IACR,IAAAtB,UAAA,GAAAsB,CAAA,CAAAtB,UAAU;IAElB,IAAI,CAACA,UAAU,EAAE;MACf,MAAM,IAAIuB,SAAS,CAAC,yBAAyB,CAAC;;IAGhDX,aAAa,CAACC,KAAK,CAACW,GAAG,CAACxB,UAAU,CAAC;IACnCY,aAAa,CAACG,YAAY,CAACf,UAAU,CAAC,GAAGsB,CAAC;EAC5C,CAAC,CAAC;AACJ;AAEA,OAAM,SAAUG,WAAWA,CACzB7B,SAAoB,EACpBC,OAAY;EAEZ,OAAO6B,KAAK,CAACC,IAAI,CAACf,aAAa,CAACC,KAAK,CAAC,CACnCe,MAAM,CAAC,UAAC5B,UAAkB;IACzB,OAAOH,OAAO,CAACG,UAAU,CAAC,KAAK,KAAK;EACtC,CAAC,CAAC,CACD6B,GAAG,CAAC,UAAC7B,UAAkB;IACtB,IAAM8B,MAAM,GAAGlB,aAAa,CAACG,YAAY,CAACf,UAAU,CAAC;IAErD,IAAM+B,QAAQ,GAAG,IAAID,MAAM,CAAClC,SAAS,EAAEC,OAAO,CAACG,UAAU,CAAC,CAAC;IAE3D;IACAH,OAAO,CAACG,UAAU,CAAC,GAAG+B,QAAQ,CAAClC,OAAO;IAEtC,OAAOkC,QAAQ;EACjB,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}
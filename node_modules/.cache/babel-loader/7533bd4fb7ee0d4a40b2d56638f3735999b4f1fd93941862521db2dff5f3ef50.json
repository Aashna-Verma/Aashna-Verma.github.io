{"ast":null,"code":"import { TrackDirection } from './direction';\nimport { setStyle } from '../utils/';\nvar ScrollbarThumb = /** @class */function () {\n  function ScrollbarThumb(_direction, _minSize) {\n    if (_minSize === void 0) {\n      _minSize = 0;\n    }\n    this._direction = _direction;\n    this._minSize = _minSize;\n    /**\n     * Thumb element\n     */\n    this.element = document.createElement('div');\n    /**\n     * Display size of the thumb\n     * will always be greater than `scrollbar.options.thumbMinSize`\n     */\n    this.displaySize = 0;\n    /**\n     * Actual size of the thumb\n     */\n    this.realSize = 0;\n    /**\n     * Thumb offset to the top\n     */\n    this.offset = 0;\n    this.element.className = \"scrollbar-thumb scrollbar-thumb-\" + _direction;\n  }\n  /**\n   * Attach to track element\n   *\n   * @param trackEl Track element\n   */\n  ScrollbarThumb.prototype.attachTo = function (trackEl) {\n    trackEl.appendChild(this.element);\n  };\n  ScrollbarThumb.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    // calculate thumb size\n    // pageSize > containerSize -> scrollable\n    this.realSize = Math.min(containerSize / pageSize, 1) * containerSize;\n    this.displaySize = Math.max(this.realSize, this._minSize);\n    // calculate thumb offset\n    this.offset = scrollOffset / pageSize * (containerSize + (this.realSize - this.displaySize));\n    setStyle(this.element, this._getStyle());\n  };\n  ScrollbarThumb.prototype._getStyle = function () {\n    switch (this._direction) {\n      case TrackDirection.X:\n        return {\n          width: this.displaySize + \"px\",\n          '-transform': \"translate3d(\" + this.offset + \"px, 0, 0)\"\n        };\n      case TrackDirection.Y:\n        return {\n          height: this.displaySize + \"px\",\n          '-transform': \"translate3d(0, \" + this.offset + \"px, 0)\"\n        };\n      default:\n        return null;\n    }\n  };\n  return ScrollbarThumb;\n}();\nexport { ScrollbarThumb };","map":{"version":3,"names":["TrackDirection","setStyle","ScrollbarThumb","_direction","_minSize","element","document","createElement","displaySize","realSize","offset","className","prototype","attachTo","trackEl","appendChild","update","scrollOffset","containerSize","pageSize","Math","min","max","_getStyle","X","width","Y","height"],"sources":["C:\\Users\\aashn\\OneDrive\\Documents\\Aashna\\3_PROJECTS\\programming\\personal-website\\node_modules\\smooth-scrollbar\\src\\track\\thumb.ts"],"sourcesContent":["import * as I from '../interfaces/';\nimport { TrackDirection } from './direction';\nimport { setStyle } from '../utils/';\n\nexport class ScrollbarThumb implements I.ScrollbarThumb {\n  /**\n   * Thumb element\n   */\n  readonly element = document.createElement('div');\n\n  /**\n   * Display size of the thumb\n   * will always be greater than `scrollbar.options.thumbMinSize`\n   */\n  displaySize = 0;\n\n  /**\n   * Actual size of the thumb\n   */\n  realSize = 0;\n\n  /**\n   * Thumb offset to the top\n   */\n  offset = 0;\n\n  constructor(\n    private _direction: TrackDirection,\n    private _minSize = 0,\n  ) {\n    this.element.className = `scrollbar-thumb scrollbar-thumb-${_direction}`;\n  }\n\n  /**\n   * Attach to track element\n   *\n   * @param trackEl Track element\n   */\n  attachTo(trackEl: HTMLElement) {\n    trackEl.appendChild(this.element);\n  }\n\n  update(\n    scrollOffset: number,\n    containerSize: number,\n    pageSize: number,\n  ) {\n    // calculate thumb size\n    // pageSize > containerSize -> scrollable\n    this.realSize = Math.min(containerSize / pageSize, 1) * containerSize;\n    this.displaySize = Math.max(this.realSize, this._minSize);\n\n    // calculate thumb offset\n    this.offset = scrollOffset / pageSize * (containerSize + (this.realSize - this.displaySize));\n\n    setStyle(this.element, this._getStyle());\n  }\n\n  private _getStyle() {\n    switch (this._direction) {\n      case TrackDirection.X:\n        return {\n          width: `${this.displaySize}px`,\n          '-transform': `translate3d(${this.offset}px, 0, 0)`,\n        };\n\n      case TrackDirection.Y:\n        return {\n          height: `${this.displaySize}px`,\n          '-transform': `translate3d(0, ${this.offset}px, 0)`,\n        };\n\n      default:\n        return null;\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,aAAa;AAC5C,SAASC,QAAQ,QAAQ,WAAW;AAEpC,IAAAC,cAAA;EAsBE,SAAAA,eACUC,UAA0B,EAC1BC,QAAY;IAAZ,IAAAA,QAAA;MAAAA,QAAA,IAAY;IAAA;IADZ,KAAAD,UAAU,GAAVA,UAAU;IACV,KAAAC,QAAQ,GAARA,QAAQ;IAvBlB;;;IAGS,KAAAC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAEhD;;;;IAIA,KAAAC,WAAW,GAAG,CAAC;IAEf;;;IAGA,KAAAC,QAAQ,GAAG,CAAC;IAEZ;;;IAGA,KAAAC,MAAM,GAAG,CAAC;IAMR,IAAI,CAACL,OAAO,CAACM,SAAS,GAAG,qCAAmCR,UAAY;EAC1E;EAEA;;;;;EAKAD,cAAA,CAAAU,SAAA,CAAAC,QAAQ,GAAR,UAASC,OAAoB;IAC3BA,OAAO,CAACC,WAAW,CAAC,IAAI,CAACV,OAAO,CAAC;EACnC,CAAC;EAEDH,cAAA,CAAAU,SAAA,CAAAI,MAAM,GAAN,UACEC,YAAoB,EACpBC,aAAqB,EACrBC,QAAgB;IAEhB;IACA;IACA,IAAI,CAACV,QAAQ,GAAGW,IAAI,CAACC,GAAG,CAACH,aAAa,GAAGC,QAAQ,EAAE,CAAC,CAAC,GAAGD,aAAa;IACrE,IAAI,CAACV,WAAW,GAAGY,IAAI,CAACE,GAAG,CAAC,IAAI,CAACb,QAAQ,EAAE,IAAI,CAACL,QAAQ,CAAC;IAEzD;IACA,IAAI,CAACM,MAAM,GAAGO,YAAY,GAAGE,QAAQ,IAAID,aAAa,IAAI,IAAI,CAACT,QAAQ,GAAG,IAAI,CAACD,WAAW,CAAC,CAAC;IAE5FP,QAAQ,CAAC,IAAI,CAACI,OAAO,EAAE,IAAI,CAACkB,SAAS,EAAE,CAAC;EAC1C,CAAC;EAEOrB,cAAA,CAAAU,SAAA,CAAAW,SAAS,GAAjB;IACE,QAAQ,IAAI,CAACpB,UAAU;MACrB,KAAKH,cAAc,CAACwB,CAAC;QACnB,OAAO;UACLC,KAAK,EAAK,IAAI,CAACjB,WAAW,OAAI;UAC9B,YAAY,EAAE,iBAAe,IAAI,CAACE,MAAM;SACzC;MAEH,KAAKV,cAAc,CAAC0B,CAAC;QACnB,OAAO;UACLC,MAAM,EAAK,IAAI,CAACnB,WAAW,OAAI;UAC/B,YAAY,EAAE,oBAAkB,IAAI,CAACE,MAAM;SAC5C;MAEH;QACE,OAAO,IAAI;;EAEjB,CAAC;EACH,OAAAR,cAAC;AAAD,CAAC,CAxED"},"metadata":{},"sourceType":"module","externalDependencies":[]}
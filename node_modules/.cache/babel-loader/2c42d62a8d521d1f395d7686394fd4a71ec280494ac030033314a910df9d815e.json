{"ast":null,"code":"import { clamp } from '../utils';\nexport function scrollIntoView(scrollbar, elem, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.alignToTop,\n    alignToTop = _c === void 0 ? true : _c,\n    _d = _b.onlyScrollIfNeeded,\n    onlyScrollIfNeeded = _d === void 0 ? false : _d,\n    _e = _b.offsetTop,\n    offsetTop = _e === void 0 ? 0 : _e,\n    _f = _b.offsetLeft,\n    offsetLeft = _f === void 0 ? 0 : _f,\n    _g = _b.offsetBottom,\n    offsetBottom = _g === void 0 ? 0 : _g;\n  var containerEl = scrollbar.containerEl,\n    bounding = scrollbar.bounding,\n    offset = scrollbar.offset,\n    limit = scrollbar.limit;\n  if (!elem || !containerEl.contains(elem)) return;\n  var targetBounding = elem.getBoundingClientRect();\n  if (onlyScrollIfNeeded && scrollbar.isVisible(elem)) return;\n  var delta = alignToTop ? targetBounding.top - bounding.top - offsetTop : targetBounding.bottom - bounding.bottom + offsetBottom;\n  scrollbar.setMomentum(targetBounding.left - bounding.left - offsetLeft, clamp(delta, -offset.y, limit.y - offset.y));\n}","map":{"version":3,"names":["clamp","scrollIntoView","scrollbar","elem","_a","_b","_c","alignToTop","_d","onlyScrollIfNeeded","_e","offsetTop","_f","offsetLeft","_g","offsetBottom","containerEl","bounding","offset","limit","contains","targetBounding","getBoundingClientRect","isVisible","delta","top","bottom","setMomentum","left","y"],"sources":["C:\\Users\\aashn\\OneDrive\\Documents\\Aashna\\3_PROJECTS\\programming\\personal-website\\node_modules\\smooth-scrollbar\\src\\scrolling\\scroll-into-view.ts"],"sourcesContent":["import { clamp } from '../utils';\n\nimport * as I from '../interfaces/';\n\nexport function scrollIntoView(\n  scrollbar: I.Scrollbar,\n  elem: HTMLElement,\n  {\n    alignToTop = true,\n    onlyScrollIfNeeded = false,\n    offsetTop = 0,\n    offsetLeft = 0,\n    offsetBottom = 0,\n  }: Partial<I.ScrollIntoViewOptions> = {},\n) {\n  const {\n    containerEl,\n    bounding,\n    offset,\n    limit,\n  } = scrollbar;\n\n  if (!elem || !containerEl.contains(elem)) return;\n\n  const targetBounding = elem.getBoundingClientRect();\n\n  if (onlyScrollIfNeeded && scrollbar.isVisible(elem)) return;\n\n  const delta = alignToTop ? targetBounding.top - bounding.top - offsetTop : targetBounding.bottom - bounding.bottom + offsetBottom;\n\n  scrollbar.setMomentum(\n    targetBounding.left - bounding.left - offsetLeft,\n    clamp(delta, -offset.y, limit.y - offset.y),\n  );\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAIhC,OAAM,SAAUC,cAAcA,CAC5BC,SAAsB,EACtBC,IAAiB,EACjBC,EAMwC;MANxCC,EAAA,GAAAD,EAAA,mBAAAA,EAMwC;IALtCE,EAAA,GAAAD,EAAA,CAAAE,UAAiB;IAAjBA,UAAA,GAAAD,EAAA,qBAAAA,EAAiB;IACjBE,EAAA,GAAAH,EAAA,CAAAI,kBAA0B;IAA1BA,kBAAA,GAAAD,EAAA,sBAAAA,EAA0B;IAC1BE,EAAA,GAAAL,EAAA,CAAAM,SAAa;IAAbA,SAAA,GAAAD,EAAA,kBAAAA,EAAa;IACbE,EAAA,GAAAP,EAAA,CAAAQ,UAAc;IAAdA,UAAA,GAAAD,EAAA,kBAAAA,EAAc;IACdE,EAAA,GAAAT,EAAA,CAAAU,YAAgB;IAAhBA,YAAA,GAAAD,EAAA,kBAAAA,EAAgB;EAIhB,IAAAE,WAAA,GAAAd,SAAA,CAAAc,WAAW;IACXC,QAAA,GAAAf,SAAA,CAAAe,QAAQ;IACRC,MAAA,GAAAhB,SAAA,CAAAgB,MAAM;IACNC,KAAA,GAAAjB,SAAA,CAAAiB,KAAK;EAGP,IAAI,CAAChB,IAAI,IAAI,CAACa,WAAW,CAACI,QAAQ,CAACjB,IAAI,CAAC,EAAE;EAE1C,IAAMkB,cAAc,GAAGlB,IAAI,CAACmB,qBAAqB,EAAE;EAEnD,IAAIb,kBAAkB,IAAIP,SAAS,CAACqB,SAAS,CAACpB,IAAI,CAAC,EAAE;EAErD,IAAMqB,KAAK,GAAGjB,UAAU,GAAGc,cAAc,CAACI,GAAG,GAAGR,QAAQ,CAACQ,GAAG,GAAGd,SAAS,GAAGU,cAAc,CAACK,MAAM,GAAGT,QAAQ,CAACS,MAAM,GAAGX,YAAY;EAEjIb,SAAS,CAACyB,WAAW,CACnBN,cAAc,CAACO,IAAI,GAAGX,QAAQ,CAACW,IAAI,GAAGf,UAAU,EAChDb,KAAK,CAACwB,KAAK,EAAE,CAACN,MAAM,CAACW,CAAC,EAAEV,KAAK,CAACU,CAAC,GAAGX,MAAM,CAACW,CAAC,CAAC,CAC5C;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}